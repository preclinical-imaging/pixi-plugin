<!-- BEGIN pixi-plugin templates/screens/UploadBli.vm -->
<div class="upload-container">
    <h2>PIXI Bioluminescence Imaging Session Uploader</h2>

    <div class="form-instructions">
        <p>Upload zipped (.zip) bioluminescence imaging sessions to a specified project.</p>

        <p>File format requirements:</p>

        <ul>
            <li>Must be a .zip file</li>
            <li>Each image session must be in its own directory within the zip file.</li>
            <li>Each directory must contain an AnalyzedClickInfo.txt file which contains the metadata for the session.</li>
            <li>Imaging and non-imaging data files will be uploaded to the session.</li>
        </ul>
    </div>

    <form id="upload-form" name="upload-form" method="post">

        <fieldset>
            <legend>Project & Data Selection</legend>

                <div class="filter-container">
                    <label for="project" class="filter-label">Select Project</label>

                    <label class="filter-icon" for="project-filter"><i class="fa fa-search"></i></label>
                    <input type="text" id="project-filter" name="project-filter" placeholder="Filter" onkeyup="" class="filter-input"/>

                    <select id="project" name="project" form="upload-form" size="8" required class="filer-select"></select>
                </div>

                <div class="form-component">
                    <label class="file-label" for="file">Select ZIP File to Upload:</label>
                    <input type="file" id="file" name="file" accept="application/zip" required/>
                </div>
        </fieldset>

        <fieldset>
            <legend>Subject & Session Identification</legend>

            <div class="form-component">
                <label for="subject-label-option" class="subject-label-option">Subject Labeling Option:</label>
                <select id="subject-label-option" name="subject-label-option" form="upload-form">
                    <option value="hotel">Multi-Subject Image Session - Send to Projects 'Hotel' Subject</option>
                    <option value="animalNumber">Use Animal Number field</option>
                    <option value="comment1">Use Comment1 field</option>
                    <option value="comment2">Use Comment2 field</option>
                </select>
                <p class="input-desc">Map each image session to an XNAT subject. New subjects will be created as needed.</p>
            </div>

            <div class="form-component">
                <label for="session-label-option" class="session-label-option">Session Labeling Option:</label>
                <select id="session-label-option" name="session-label-option" form="upload-form">
                    <option value="clickNumber">Use ClickNumber field</option>
                    <option value="experiment">Use Experiment field</option>
                    <option value="comment1">Use Comment1 field</option>
                    <option value="comment2">Use Comment2 field</option>
                </select>
                <p class="input-desc">Specify how to label each image session in XNAT.</p>
            </div>

            <div class="advanced-options" style="display: none;">

                <div class="form-component">
                    <label for="subject-label-regex" class="subject-label-regex">Subject Labeling Regex:</label>
                    <input type="text" id="subject-label-regex" name="subject-field-regex" form="upload-form">
                    <div>
                        <p class="input-desc">Enter regex to extract subject label. If empty, the entire field is used. Ignore if using 'Multi-Subject Image Session' option.</p>

                    </div>
                </div>

                <div class="form-component">
                    <label for="session-label-regex" class="session-label-regex">Session Labeling Regex:</label>
                    <input type="text" id="session-label-regex" name="session-label-regex" form="upload-form">
                    <p class="input-desc">Enter regex to extract session label. If empty, the entire field is used.</p>
                </div>

            </div>

            <button type="button" class="advanced-options-button">Show Advanced Options</button>
        </fieldset>

        <input class="submit" id="upload-button" type="button" name="eventSubmit_doPerform" value="Begin Upload" onclick="submitForm();"/>

    </form>
</div>

<style>

    .upload-container {
        width: 100%;
    }

    .form-instructions {
        margin-bottom: 2em;
    }

    #upload-form {
        display: flex;
        flex-direction: column;
        row-gap: 1em;
        font-size: 14px;
        box-sizing: border-box;
        width: 600px;
    }

    #upload-form label {
        font-weight: normal;
    }

    #upload-form select,
    #upload-form text,
    #upload-form input[type="file"] {
        width: 100%;
        padding: 8px;
        border: 1px solid #ccc;
        border-radius: 4px;
        box-sizing: border-box;
    }

    #upload-form .filter-container {
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        align-items: center;
        row-gap: 0.5rem;
        margin-bottom: 2rem;
    }

    #upload-form .filter-label {
        flex: 2 1 auto;
    }

    #upload-form .filter-icon {
        flex: 0 0 auto;
        margin-right: 5px;
    }

    #upload-form .form-component {
        display: flex;
        flex-direction: column;
        row-gap: 0.5rem;
        margin-bottom: 0.5rem;
    }

    #upload-button {
        width: 30%;
        margin-top: 10px;
        background-color: #0074b8; /* XNAT blue color */
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        background-image: none;  /* Remove default button background */
        align-self: flex-end;
    }

    #upload-button:hover {
        background-color: #005eaa; /* Slightly darker blue on hover */
    }

    .input-desc {
        margin: 0 0 10px 0;
        font-size: 12px;
    }

    #upload-form fieldset {
        margin: 1em 0;
        padding: 1em;
        border: 1px solid #ccc;
        background-color: #fdfdfd;
        border-radius: 4px;
    }

    #upload-form legend {
        font-weight: bold;
    }

    #upload-form .advanced-options-button {
        width: 100%;
        padding: 8px;
        border: 1px solid #ccc;
        border-radius: 4px;
        cursor: pointer;
        background-image: none;  /* Remove default button background */
    }

</style>

<script type="text/javascript" src="$content.getURI('scripts/xnat/plugin/pixi/pixi-projects.js')"></script>
<script type="text/javascript" src="$content.getURI('scripts/xnat/plugin/pixi/pixi-bli-importer.js')"></script>

<script type="text/javascript">
    // Form Elements
    let formEl            = document.getElementById("upload-form");
    let projectEl         = document.getElementById("project");
    let projectFilerInput = document.getElementById("project-filter");
    let mappingEl         = document.getElementById("mapping");
    let prearchiveCode0El = document.getElementById("prearchive-code-0");
    let prearchiveCode1El = document.getElementById("prearchive-code-1");
    let fileEl            = document.getElementById("file");
    let advancedOptionsEl = document.querySelector('.advanced-options');
    let subjectLabelOptionEl = document.getElementById("subject-label-option");
    let sessionLabelOptionEl = document.getElementById("session-label-option");
    let subjectLabelRegexEl = document.getElementById("subject-label-regex");
    let sessionLabelRegexEl = document.getElementById("session-label-regex");

    // Advanced options accordion button
    document.querySelector('.advanced-options-button').addEventListener('click', () => {
        let advancedOptions = document.querySelector('.advanced-options');
        advancedOptions.style.display = advancedOptions.style.display === 'none' ? 'block' : 'none';
        let button = document.querySelector('.advanced-options-button');
        button.textContent = button.textContent === 'Show Advanced Options' ? 'Hide Advanced Options' : 'Show Advanced Options';
    });

    // Form rendering
    let renderProjectSelectBox = function(selectBox, projects) {
        console.debug('renderProjectSelectBox()')

        // Clear select box
        selectBox.options.length = 0;

        projects.forEach(project => {
            selectBox.options[selectBox.length] = new Option(project['id'], project['id'])
        })
    }

    // Load projects and mappings then render select boxes
    let projects;
    XNAT.plugin.pixi.projects.getAll().then(resultSet => resultSet['ResultSet']['Result'])
                                      .then(prjs => {
                                          projects = prjs;
                                          renderProjectSelectBox(projectEl, prjs);
                                      });

    // Event listeners
    let filterProject = (event) => {
        console.debug('filterProject()')

        let filter = event.target.value.toLowerCase();
        let projects = Array.from(projectEl.options);

        projects.forEach(project => {
            project.hidden = !project.value.toLowerCase().includes(filter);
        });
    }

    projectFilerInput.addEventListener('keyup', filterProject);

    async function submitForm() {
        console.debug('submitForm()')

        function validateForm() {
            let validProject = XNAT.validate(projectEl).required().check();
            let validImageArchiveFile = XNAT.validate(fileEl).is('fileType', 'zip').check();
            let validSubjectLabelOption = XNAT.validate(subjectLabelOptionEl).required().check();
            let validSessionLabelOption = XNAT.validate(sessionLabelOptionEl).required().check();

            return validProject && validImageArchiveFile && validSubjectLabelOption && validSessionLabelOption;
        }

        let isValid = validateForm()

        console.debug(`BLI uploader form validation: ${isValid}`);

        if (!isValid) {
            return;
        }

        let projectId = projectEl.value;
        let uploadId = new Date().toISOString()
                                 .replaceAll('-', '_')
                                 .replaceAll(':', '_')
                                 .replaceAll('.', '_');

        let file = fileEl.files[0];
        let encodedFileName = encodeURIComponent(file.name);
        encodedFileName = encodedFileName.replaceAll('%20', '_'); // Replace spaces with underscores
        let cachePath = `/user/cache/resources/${uploadId}/files/${encodedFileName}`;
        let encodedCachePath = encodeURIComponent(cachePath);
        let userResourceCacheUrl = XNAT.url.csrfUrl(`/data/${cachePath}`);

        let formDataFileOnly = new FormData()
        formDataFileOnly.append('file', file)

        // Upload the zip file to the users cache
        console.debug(`Uploading ${file.name}`);
        XNAT.ui.dialog.static.wait(`Uploading ${file.name}`,{id: "bli_upload"});

        let response = await fetch(userResourceCacheUrl, {
            method: 'PUT',
            body : formDataFileOnly
        })

        if (response.ok) {
            console.debug('Upload successful');
            XNAT.ui.dialog.close("bli_upload");
        } else {
            console.error(`Failed to upload ${file.name}`)
            XNAT.ui.dialog.close("bli_upload");
            XNAT.ui.dialog.open({
                title: 'Upload Failed',
                content: `<div class="error">Failed to upload ${file.name}.</div>`,
                buttons: [
                    {
                        label: 'OK',
                        isDefault: true,
                        close: true,
                    }
                ]
            })
            return;
        }

        let subjectLabelOption = subjectLabelOptionEl.value;
        let encodedSubjectLabelOption = encodeURIComponent(subjectLabelOption);
        let sessionLabelOption = sessionLabelOptionEl.value;
        let encodedSessionLabelOption = encodeURIComponent(sessionLabelOption);
        let subjectLabelRegex = subjectLabelRegexEl.value ? subjectLabelRegexEl.value : '(.*)';
        let encodedSubjectLabelRegex = encodeURIComponent(subjectLabelRegex);
        let sessionLabelRegex = sessionLabelRegexEl.value ? sessionLabelRegexEl.value : '(.*)';
        let encodedSessionLabelRegex = encodeURIComponent(sessionLabelRegex);

        let importServiceUrl = XNAT.url.csrfUrl('/data/services/import');
        importServiceUrl = XNAT.url.addQueryString(importServiceUrl, ['import-handler=BLI',
                                                                      `PROJECT_ID=${projectId}`,
                                                                      `src=${encodedCachePath}`,
                                                                      `cachePath=${uploadId}/${encodedFileName}`,
                                                                      `subjectLabelOption=${encodedSubjectLabelOption}`,
                                                                      `sessionLabelOption=${encodedSessionLabelOption}`,
                                                                      `subjectLabelRegex=${encodedSubjectLabelRegex}`,
                                                                      `sessionLabelRegex=${encodedSessionLabelRegex}`]);

        // Extract the zip file from the users cache
        console.debug(`Extracting ${file.name}`);
        XNAT.ui.dialog.static.wait(`Extracting ${file.name}`,{id: "bli_extraction"});

        response = await fetch(importServiceUrl, {method: 'POST'})

        if (response.ok) {
            console.debug('Extraction successful');
            XNAT.ui.dialog.close("bli_extraction");

            XNAT.ui.dialog.open({
                title: 'Upload/Extraction Successful',
                content: `<div class="success">Upload/Extraction of ${file.name} successful. Depending on the projects
                prearchive settings, visit the <a target="_blank" href="/app/template/XDATScreen_prearchives.vm">prearchive</a>
                to review the session(s) before archiving or visit the <a target="_blank" href="/data/projects/${projectId}">project</a>
                to view archived session(s).</div>`,
                buttons: [
                    {
                        label: 'OK',
                        isDefault: true,
                        close: true,
                    }
                ]
            })
        } else {
            console.error(`Failed to extract ${file.name}`)
            XNAT.ui.dialog.close("bli_extraction");

            response.text().then(text => {
                // Error message is returned as html. Try to extract from the h3 tags.
                let error = text.match(/<h3>(.*)<\/h3>/);

                if (error.length === 2) {
                    return `Failed to extract ${file.name}: <br> <b>${error[1]}</b>`;
                } else {
                    return `Failed to extract ${file.name}`;
                }
            }).then(error => {
                XNAT.ui.dialog.open({
                    title: 'Extraction Failed',
                    content: `<div class="error">${error}</div>`,
                    buttons: [
                        {
                            label: 'OK',
                            isDefault: true,
                            close: true,
                        }
                    ]
                })
            })
        }
    }
</script>

<!-- END pixi-plugin templates/screens/UploadBli.vm -->